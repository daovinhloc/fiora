name: Deploy to Vercel

on:
  push:
    branches:
      - develop
      - staging
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  # Stage 1: Setup and Environment Configuration
  setup:
    name: Setup and Environment
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.set-env.outputs.deploy_env }}
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy_env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "Using manually selected environment: ${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy_env=production" >> $GITHUB_OUTPUT
            echo "Using production environment for main branch"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "deploy_env=staging" >> $GITHUB_OUTPUT
            echo "Using staging environment for staging branch"
          else
            echo "deploy_env=development" >> $GITHUB_OUTPUT
            echo "Using development environment for develop branch"
          fi

  # Stage 2: Lint and Check
  lint:
    name: Lint and Check
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Set CI environment variable to skip husky installation
          export CI=true
          npm ci --ignore-scripts
          # Run prepare script manually without husky
          echo "Skipping husky in CI environment"

      - name: Check for Prisma schema changes
        id: check-prisma
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q 'prisma/schema.prisma'; then
            echo "PRISMA_CHANGED=true" >> $GITHUB_ENV
            echo "Prisma schema changed"
          else
            echo "PRISMA_CHANGED=false" >> $GITHUB_ENV
            echo "No changes in Prisma schema"
          fi

      - name: Run Prisma generate
        run: npx prisma generate

      - name: Run linting
        run: npm run lint

  # Stage 3: Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    needs: [setup, lint]
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      DEPLOY_ENV: ${{ needs.setup.outputs.deploy_env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: |
          export CI=true
          npm install --global vercel@latest --ignore-scripts

      - name: Disable Vercel CLI telemetry
        run: vercel telemetry disable

      - name: Set environment-specific variables
        run: |
          if [[ "${{ env.DEPLOY_ENV }}" == "development" ]]; then
            echo "AUTH_SECRET=${{ secrets.AUTH_SECRET_DEV }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}" >> $GITHUB_ENV
            echo "NEXT_DECRYPTION_GROWTHBOOK_KEY=${{ secrets.NEXT_DECRYPTION_GROWTHBOOK_KEY_DEV }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_API_HOST=https://cdn.growthbook.io" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY=sdk-ijlfMdcecDKRKQA" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_API_ENDPOINT=https://cdn.growthbook.io/api/features/sdk-ijlfMdcecDKRKQA" >> $GITHUB_ENV
            echo "NEXTAUTH_URL=${{ vars.NEXTAUTH_URL_DEV }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL_DEV }}" >> $GITHUB_ENV
          elif [[ "${{ env.DEPLOY_ENV }}" == "staging" ]]; then
            echo "AUTH_SECRET=${{ secrets.AUTH_SECRET_STAGING }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}" >> $GITHUB_ENV
            echo "NEXT_DECRYPTION_GROWTHBOOK_KEY=${{ secrets.NEXT_DECRYPTION_GROWTHBOOK_KEY_STAGING }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_API_HOST=https://cdn.growthbook.io" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY=sdk-89JLnlXzFzkW6lBf" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_API_ENDPOINT=https://cdn.growthbook.io/api/features/sdk-fCB5FPgUx0AlDpfZ" >> $GITHUB_ENV
            echo "NEXTAUTH_URL=${{ vars.NEXTAUTH_URL_STAGING }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL_STAGING }}" >> $GITHUB_ENV
          elif [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
            echo "AUTH_SECRET=${{ secrets.AUTH_SECRET_PROD }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}" >> $GITHUB_ENV
            echo "NEXT_DECRYPTION_GROWTHBOOK_KEY=${{ secrets.NEXT_DECRYPTION_GROWTHBOOK_KEY_PROD }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_API_HOST=https://cdn.growthbook.io" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY=sdk-89JLnlXzFzkW6lBf" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_GROWTHBOOK_API_ENDPOINT=https://cdn.growthbook.io/api/features/sdk-fCB5FPgUx0AlDpfZ" >> $GITHUB_ENV
            echo "NEXTAUTH_URL=${{ vars.NEXTAUTH_URL_PROD }}" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL_PROD }}" >> $GITHUB_ENV
          fi

      - name: Deploy to Vercel with environment variables
        id: deploy
        run: |
          echo "Deploying to Vercel (${{ env.DEPLOY_ENV }} environment)..."

          # Remove any existing .vercel directory
          rm -rf .vercel

          # Set up Vercel CLI with token
          echo "VERCEL_ORG_ID=${{ secrets.VERCEL_ORG_ID }}" >> $GITHUB_ENV
          echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}" >> $GITHUB_ENV

          # Create deployment command with environment variables
          DEPLOY_CMD="vercel --token=\"${{ secrets.VERCEL_TOKEN }}\""

          # Add environment variables
          DEPLOY_CMD="$DEPLOY_CMD --env AUTH_SECRET=\"${{ env.AUTH_SECRET }}\""
          DEPLOY_CMD="$DEPLOY_CMD --env DATABASE_URL=\"${{ env.DATABASE_URL }}\""
          DEPLOY_CMD="$DEPLOY_CMD --env NEXT_DECRYPTION_GROWTHBOOK_KEY=\"${{ env.NEXT_DECRYPTION_GROWTHBOOK_KEY }}\""
          DEPLOY_CMD="$DEPLOY_CMD --env NEXT_PUBLIC_GROWTHBOOK_API_HOST=\"${{ env.NEXT_PUBLIC_GROWTHBOOK_API_HOST }}\""
          DEPLOY_CMD="$DEPLOY_CMD --env NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY=\"${{ env.NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY }}\""
          DEPLOY_CMD="$DEPLOY_CMD --env NEXT_PUBLIC_GROWTHBOOK_API_ENDPOINT=\"${{ env.NEXT_PUBLIC_GROWTHBOOK_API_ENDPOINT }}\""
          DEPLOY_CMD="$DEPLOY_CMD --env NEXTAUTH_URL=\"${{ env.NEXTAUTH_URL }}\""
          DEPLOY_CMD="$DEPLOY_CMD --env NEXT_PUBLIC_API_BASE_URL=\"${{ env.NEXT_PUBLIC_API_BASE_URL }}\""

          # Add production flag if needed
          if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
            DEPLOY_CMD="$DEPLOY_CMD --prod"
          else
            DEPLOY_CMD="$DEPLOY_CMD --env NODE_ENV=${{ env.DEPLOY_ENV }}"
          fi

          # Execute deployment and capture URL
          DEPLOYMENT_URL=$(eval $DEPLOY_CMD)
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

  # Stage 4: Post-Deployment Notifications
  notify:
    name: Post-Deployment Notifications
    needs: [setup, deploy]
    runs-on: ubuntu-latest
    if: success()
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Comment on commit/PR with deployment status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ needs.deploy.outputs.deployment_url }}';
            const environment = '${{ needs.setup.outputs.deploy_env }}';

            // Determine if this is a PR or a direct commit
            const isPR = !!context.payload.pull_request;

            let commentBody = `## ðŸš€ Vercel Deployment\n\n`;
            commentBody += `**Environment:** ${environment}\n`;
            commentBody += `**Status:** âœ… Deployed successfully\n`;
            commentBody += `**Preview URL:** [${deploymentUrl}](${deploymentUrl})\n\n`;
            commentBody += `You can view the deployment by clicking the preview URL above.`;

            if (isPR) {
              // Comment on PR
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody
              });
            } else {
              // Comment on commit
              github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: commentBody
              });
            }
